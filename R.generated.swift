//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 38 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `BlueThemeMainColor`.
    static let blueThemeMainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueThemeMainColor")
    /// Color `BlueThemeSubColor`.
    static let blueThemeSubColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueThemeSubColor")
    /// Color `BlueThemeThirdColor`.
    static let blueThemeThirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BlueThemeThirdColor")
    /// Color `CalendarHeaderColor`.
    static let calendarHeaderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CalendarHeaderColor")
    /// Color `CalendarTitleDefaultColor`.
    static let calendarTitleDefaultColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CalendarTitleDefaultColor")
    /// Color `CalendarTitlePlaceHolderColor`.
    static let calendarTitlePlaceHolderColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CalendarTitlePlaceHolderColor")
    /// Color `ClearButtonColor`.
    static let clearButtonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ClearButtonColor")
    /// Color `DiaryBackgroundColor`.
    static let diaryBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "DiaryBackgroundColor")
    /// Color `DiaryDisabledColor`.
    static let diaryDisabledColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "DiaryDisabledColor")
    /// Color `FloatingViewAsset`.
    static let floatingViewAsset = Rswift.ColorResource(bundle: R.hostingBundle, name: "FloatingViewAsset")
    /// Color `GreenThemeMainColor`.
    static let greenThemeMainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "GreenThemeMainColor")
    /// Color `GreenThemeSubColor`.
    static let greenThemeSubColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "GreenThemeSubColor")
    /// Color `GreenThemeThirdColor`.
    static let greenThemeThirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "GreenThemeThirdColor")
    /// Color `NavigationButtonColor`.
    static let navigationButtonColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "NavigationButtonColor")
    /// Color `PasscodeBackground`.
    static let passcodeBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "PasscodeBackground")
    /// Color `PasscodeDotDark`.
    static let passcodeDotDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "PasscodeDotDark")
    /// Color `PasscodeDotLight`.
    static let passcodeDotLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "PasscodeDotLight")
    /// Color `PasscodeTextColor`.
    static let passcodeTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "PasscodeTextColor")
    /// Color `PurpleThemeMainColor`.
    static let purpleThemeMainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "PurpleThemeMainColor")
    /// Color `PurpleThemeSubColor`.
    static let purpleThemeSubColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "PurpleThemeSubColor")
    /// Color `PurpleThemeThirdColor`.
    static let purpleThemeThirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "PurpleThemeThirdColor")
    /// Color `RedThemeMainColor`.
    static let redThemeMainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedThemeMainColor")
    /// Color `RedThemeSubColor`.
    static let redThemeSubColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedThemeSubColor")
    /// Color `RedThemeThirdColor`.
    static let redThemeThirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "RedThemeThirdColor")
    /// Color `SystemBlackColor`.
    static let systemBlackColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SystemBlackColor")
    /// Color `SystemWhiteColor`.
    static let systemWhiteColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SystemWhiteColor")
    /// Color `TableViewCellColor`.
    static let tableViewCellColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TableViewCellColor")
    /// Color `TextFieldTextColor`.
    static let textFieldTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextFieldTextColor")
    /// Color `ThemeSelectionColor`.
    static let themeSelectionColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ThemeSelectionColor")
    /// Color `WeekdayTextColor`.
    static let weekdayTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "WeekdayTextColor")
    /// Color `YellowThemeMainColor`.
    static let yellowThemeMainColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "YellowThemeMainColor")
    /// Color `YellowThemeSubColor`.
    static let yellowThemeSubColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "YellowThemeSubColor")
    /// Color `YellowThemeThirdColor`.
    static let yellowThemeThirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "YellowThemeThirdColor")
    /// Color `background1`.
    static let background1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "background1")
    /// Color `background2`.
    static let background2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "background2")
    /// Color `description1`.
    static let description1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "description1")
    /// Color `description2`.
    static let description2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "description2")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueThemeMainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueThemeMainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueThemeSubColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueThemeSubColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BlueThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func blueThemeThirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.blueThemeThirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CalendarHeaderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func calendarHeaderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.calendarHeaderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CalendarTitleDefaultColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func calendarTitleDefaultColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.calendarTitleDefaultColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CalendarTitlePlaceHolderColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func calendarTitlePlaceHolderColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.calendarTitlePlaceHolderColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ClearButtonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clearButtonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clearButtonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DiaryBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func diaryBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.diaryBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "DiaryDisabledColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func diaryDisabledColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.diaryDisabledColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "FloatingViewAsset", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func floatingViewAsset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.floatingViewAsset, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GreenThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenThemeMainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenThemeMainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GreenThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenThemeSubColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenThemeSubColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GreenThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func greenThemeThirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.greenThemeThirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "NavigationButtonColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func navigationButtonColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.navigationButtonColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PasscodeBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func passcodeBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.passcodeBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PasscodeDotDark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func passcodeDotDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.passcodeDotDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PasscodeDotLight", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func passcodeDotLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.passcodeDotLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PasscodeTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func passcodeTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.passcodeTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PurpleThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purpleThemeMainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purpleThemeMainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PurpleThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purpleThemeSubColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purpleThemeSubColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PurpleThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func purpleThemeThirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.purpleThemeThirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redThemeMainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redThemeMainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redThemeSubColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redThemeSubColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "RedThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redThemeThirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redThemeThirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SystemBlackColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func systemBlackColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.systemBlackColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SystemWhiteColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func systemWhiteColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.systemWhiteColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TableViewCellColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tableViewCellColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tableViewCellColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextFieldTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textFieldTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textFieldTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ThemeSelectionColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func themeSelectionColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.themeSelectionColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "WeekdayTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func weekdayTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.weekdayTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YellowThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellowThemeMainColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellowThemeMainColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YellowThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellowThemeSubColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellowThemeSubColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "YellowThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellowThemeThirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellowThemeThirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "background2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func background2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.background2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "description1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func description1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.description1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "description2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func description2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.description2, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlueThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueThemeMainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueThemeMainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlueThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueThemeSubColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueThemeSubColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BlueThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func blueThemeThirdColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.blueThemeThirdColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "CalendarHeaderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func calendarHeaderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.calendarHeaderColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "CalendarTitleDefaultColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func calendarTitleDefaultColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.calendarTitleDefaultColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "CalendarTitlePlaceHolderColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func calendarTitlePlaceHolderColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.calendarTitlePlaceHolderColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ClearButtonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clearButtonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clearButtonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DiaryBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func diaryBackgroundColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.diaryBackgroundColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "DiaryDisabledColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func diaryDisabledColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.diaryDisabledColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "FloatingViewAsset", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func floatingViewAsset(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.floatingViewAsset.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GreenThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greenThemeMainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greenThemeMainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GreenThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greenThemeSubColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greenThemeSubColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "GreenThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func greenThemeThirdColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.greenThemeThirdColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "NavigationButtonColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func navigationButtonColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.navigationButtonColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PasscodeBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func passcodeBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.passcodeBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PasscodeDotDark", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func passcodeDotDark(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.passcodeDotDark.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PasscodeDotLight", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func passcodeDotLight(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.passcodeDotLight.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PasscodeTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func passcodeTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.passcodeTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PurpleThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func purpleThemeMainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.purpleThemeMainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PurpleThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func purpleThemeSubColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.purpleThemeSubColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "PurpleThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func purpleThemeThirdColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.purpleThemeThirdColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RedThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redThemeMainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redThemeMainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RedThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redThemeSubColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redThemeSubColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "RedThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func redThemeThirdColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.redThemeThirdColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SystemBlackColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func systemBlackColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.systemBlackColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SystemWhiteColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func systemWhiteColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.systemWhiteColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TableViewCellColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tableViewCellColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tableViewCellColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextFieldTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textFieldTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textFieldTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "ThemeSelectionColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func themeSelectionColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.themeSelectionColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "WeekdayTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func weekdayTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.weekdayTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YellowThemeMainColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellowThemeMainColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellowThemeMainColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YellowThemeSubColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellowThemeSubColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellowThemeSubColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "YellowThemeThirdColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellowThemeThirdColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellowThemeThirdColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "background2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func background2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.background2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "description1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func description1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.description1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "description2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func description2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.description2.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 28 images.
  struct image {
    /// Image `Add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add")
    /// Image `AlarmIcon`.
    static let alarmIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AlarmIcon")
    /// Image `ArrowIcon`.
    static let arrowIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ArrowIcon")
    /// Image `BackButton`.
    static let backButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "BackButton")
    /// Image `CalendarAsset`.
    static let calendarAsset = Rswift.ImageResource(bundle: R.hostingBundle, name: "CalendarAsset")
    /// Image `CalendarBackButton`.
    static let calendarBackButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CalendarBackButton")
    /// Image `CalendarFrontButton`.
    static let calendarFrontButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CalendarFrontButton")
    /// Image `DarkMode`.
    static let darkMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "DarkMode")
    /// Image `DiaryDrawerButton`.
    static let diaryDrawerButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "DiaryDrawerButton")
    /// Image `DismissButton`.
    static let dismissButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "DismissButton")
    /// Image `EditButton`.
    static let editButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "EditButton")
    /// Image `FeedbackIcon`.
    static let feedbackIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "FeedbackIcon")
    /// Image `LightMode`.
    static let lightMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "LightMode")
    /// Image `LockIcon`.
    static let lockIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LockIcon")
    /// Image `LogoutIcon`.
    static let logoutIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "LogoutIcon")
    /// Image `MainIconBlueTheme`.
    static let mainIconBlueTheme = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainIconBlueTheme")
    /// Image `MainIconGreenTheme`.
    static let mainIconGreenTheme = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainIconGreenTheme")
    /// Image `MainIconPurpleTheme`.
    static let mainIconPurpleTheme = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainIconPurpleTheme")
    /// Image `MainIconRedTheme`.
    static let mainIconRedTheme = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainIconRedTheme")
    /// Image `MainIconYellowTheme`.
    static let mainIconYellowTheme = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainIconYellowTheme")
    /// Image `OpenSourceIcon`.
    static let openSourceIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "OpenSourceIcon")
    /// Image `SelectedButton`.
    static let selectedButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "SelectedButton")
    /// Image `SystemMode`.
    static let systemMode = Rswift.ImageResource(bundle: R.hostingBundle, name: "SystemMode")
    /// Image `ThemeIcon`.
    static let themeIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ThemeIcon")
    /// Image `UnSelectedButton`.
    static let unSelectedButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "UnSelectedButton")
    /// Image `check`.
    static let check = Rswift.ImageResource(bundle: R.hostingBundle, name: "check")
    /// Image `leftArrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "leftArrow")
    /// Image `searchButton`.
    static let searchButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "searchButton")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AlarmIcon", bundle: ..., traitCollection: ...)`
    static func alarmIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alarmIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ArrowIcon", bundle: ..., traitCollection: ...)`
    static func arrowIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BackButton", bundle: ..., traitCollection: ...)`
    static func backButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CalendarAsset", bundle: ..., traitCollection: ...)`
    static func calendarAsset(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarAsset, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CalendarBackButton", bundle: ..., traitCollection: ...)`
    static func calendarBackButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarBackButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CalendarFrontButton", bundle: ..., traitCollection: ...)`
    static func calendarFrontButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarFrontButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DarkMode", bundle: ..., traitCollection: ...)`
    static func darkMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.darkMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DiaryDrawerButton", bundle: ..., traitCollection: ...)`
    static func diaryDrawerButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.diaryDrawerButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DismissButton", bundle: ..., traitCollection: ...)`
    static func dismissButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dismissButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EditButton", bundle: ..., traitCollection: ...)`
    static func editButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "FeedbackIcon", bundle: ..., traitCollection: ...)`
    static func feedbackIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.feedbackIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LightMode", bundle: ..., traitCollection: ...)`
    static func lightMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lightMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LockIcon", bundle: ..., traitCollection: ...)`
    static func lockIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lockIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LogoutIcon", bundle: ..., traitCollection: ...)`
    static func logoutIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoutIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainIconBlueTheme", bundle: ..., traitCollection: ...)`
    static func mainIconBlueTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainIconBlueTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainIconGreenTheme", bundle: ..., traitCollection: ...)`
    static func mainIconGreenTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainIconGreenTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainIconPurpleTheme", bundle: ..., traitCollection: ...)`
    static func mainIconPurpleTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainIconPurpleTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainIconRedTheme", bundle: ..., traitCollection: ...)`
    static func mainIconRedTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainIconRedTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainIconYellowTheme", bundle: ..., traitCollection: ...)`
    static func mainIconYellowTheme(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainIconYellowTheme, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "OpenSourceIcon", bundle: ..., traitCollection: ...)`
    static func openSourceIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.openSourceIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SelectedButton", bundle: ..., traitCollection: ...)`
    static func selectedButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SystemMode", bundle: ..., traitCollection: ...)`
    static func systemMode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.systemMode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ThemeIcon", bundle: ..., traitCollection: ...)`
    static func themeIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.themeIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "UnSelectedButton", bundle: ..., traitCollection: ...)`
    static func unSelectedButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unSelectedButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "check", bundle: ..., traitCollection: ...)`
    static func check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leftArrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "searchButton", bundle: ..., traitCollection: ...)`
    static func searchButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchButton, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// en translation: Someday
      ///
      /// Locales: en, ko
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "ko"], comment: nil)

      /// en translation: Someday
      ///
      /// Locales: en, ko
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 72 localization keys.
    struct localizable {
      /// ko translation: # 검색 결과가 없습니다
      ///
      /// Locales: ko
      static let thereSNoSearchResult = Rswift.StringResource(key: "# There's no search result.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: # 태그 작성
      ///
      /// Locales: ko
      static let writeTags = Rswift.StringResource(key: "# Write Tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: yyyy년
      ///
      /// Locales: ko
      static let yyyy = Rswift.StringResource(key: "yyyy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: yyyy년 MM월
      ///
      /// Locales: ko
      static let mmmYyyy = Rswift.StringResource(key: "MMM yyyy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: yyyy년 MM월 dd일
      ///
      /// Locales: ko
      static let mmmDdYyyy = Rswift.StringResource(key: "MMM dd yyyy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 검색어를 입력하세요
      ///
      /// Locales: ko
      static let enterSearchTag = Rswift.StringResource(key: "Enter Search Tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 다시 이메일 인증요청을 보내주세요
      ///
      /// Locales: ko
      static let pleaseResendEmailVerifyCode = Rswift.StringResource(key: "Please resend email verify code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 다음
      ///
      /// Locales: ko
      static let next = Rswift.StringResource(key: "Next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 다크 모드
      ///
      /// Locales: ko
      static let darkMode = Rswift.StringResource(key: "Dark Mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 라이트 / 다크
      ///
      /// Locales: ko
      static let lightDark = Rswift.StringResource(key: "Light / Dark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 라이트 모드
      ///
      /// Locales: ko
      static let lightMode = Rswift.StringResource(key: "Light Mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 레몬에이드
      ///
      /// Locales: ko
      static let lemonade = Rswift.StringResource(key: "Lemonade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 로그아웃
      ///
      /// Locales: ko
      static let signOut = Rswift.StringResource(key: "Sign out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 로그인
      ///
      /// Locales: ko
      static let signIn = Rswift.StringResource(key: "Sign in", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 민트초코
      ///
      /// Locales: ko
      static let mintChocolate = Rswift.StringResource(key: "Mint chocolate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 블루레몬에이드
      ///
      /// Locales: ko
      static let blueLemonade = Rswift.StringResource(key: "Blue Lemonade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 블루베리에이드
      ///
      /// Locales: ko
      static let blueberryAde = Rswift.StringResource(key: "Blueberry Ade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호
      ///
      /// Locales: ko
      static let password = Rswift.StringResource(key: "Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호 변경
      ///
      /// Locales: ko
      static let changePasscode = Rswift.StringResource(key: "Change Passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호가 맞지 않습니다. 다시 입력해주세요
      ///
      /// Locales: ko
      static let incorrectPasscordReEnterPasscode = Rswift.StringResource(key: "Incorrect passcord, Re-enter passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호가 맞지 않습니다. 새로운 비밀번호를 입력해주세요
      ///
      /// Locales: ko
      static let incorrectPasscordEnterNewPasscode = Rswift.StringResource(key: "Incorrect Passcord, Enter new passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호가 틀렸습니다. 다시 시도하세요
      ///
      /// Locales: ko
      static let wrongPasswordTryAgain = Rswift.StringResource(key: "Wrong password. Try again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호를 4자리 이상 입력해주세요
      ///
      /// Locales: ko
      static let enterPasswordAtLeast4 = Rswift.StringResource(key: "Enter password at least 4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호를 입력하세요
      ///
      /// Locales: ko
      static let enterPasscode = Rswift.StringResource(key: "Enter passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 비밀번호를 재입력하세요
      ///
      /// Locales: ko
      static let reEnterPasscode = Rswift.StringResource(key: "Re-enter passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 사용자 피드백
      ///
      /// Locales: ko
      static let contectUs = Rswift.StringResource(key: "Contect Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 사용자의 일기가 아닙니다
      ///
      /// Locales: ko
      static let thisIsNotYourDiary = Rswift.StringResource(key: "This is not your diary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 새로운 비밀번호를 입력해주세요
      ///
      /// Locales: ko
      static let enterNewPasscode = Rswift.StringResource(key: "Enter new passcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 생체인증 (Touch ID, Face ID)
      ///
      /// Locales: ko
      static let biometricIDTouchIDFaceID = Rswift.StringResource(key: "Biometric ID (Touch ID, Face ID)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 서버 에러. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static let serverErrorPleaseContectUs = Rswift.StringResource(key: "Server Error. Please Contect Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 시간 형식 오류. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static let timeFormatErrorPleaseContectUs = Rswift.StringResource(key: "Time format Error. Please Contect Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 시스템 설정 모드
      ///
      /// Locales: ko
      static let systemSetting = Rswift.StringResource(key: "System Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 아직 회원이 아니신가요? <h>회원가입하기</h>
      ///
      /// Locales: ko
      static let donTHaveAnAccountHSignUpH = Rswift.StringResource(key: "Don't have an account? <h>Sign up</h>", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 알 수 없는 오류. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static let unkwonErrorPleaseContectUs = Rswift.StringResource(key: "Unkwon Error. Please Contect Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 오늘 하루를 기록하세요
      ///
      /// Locales: ko
      static let writeDownYourToday = Rswift.StringResource(key: "Write down your today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 오늘하루
      ///
      /// Locales: ko
      static let someday = Rswift.StringResource(key: "Someday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 오픈소스 라이선스
      ///
      /// Locales: ko
      static let openSourceLicense = Rswift.StringResource(key: "Open-source license", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 요청 에러. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static let requestErrorPleaseContectUs = Rswift.StringResource(key: "Request Error. Please Contect Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 이메일
      ///
      /// Locales: ko
      static let email = Rswift.StringResource(key: "Email", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 이메일 인증이 완료되지 않았습니다
      ///
      /// Locales: ko
      static let emailVerificationNotConfirmedYet = Rswift.StringResource(key: "Email verification not confirmed yet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 이메일 형식에 맞지 않습니다
      ///
      /// Locales: ko
      static let itIsNotEmailFormat = Rswift.StringResource(key: "It is not email format", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 이미 계정이 있으신가요? <h>로그인하기</h>
      ///
      /// Locales: ko
      static let alreadyHaveAccountHSignInH = Rswift.StringResource(key: "Already have account? <h>Sign in</h>", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 이미 로그아웃되었습니다
      ///
      /// Locales: ko
      static let alreadySignedOut = Rswift.StringResource(key: "Already signed out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 이미 사용중인 이메일입니다
      ///
      /// Locales: ko
      static let thisEmailIsAlreadyInUse = Rswift.StringResource(key: "This email is already in use", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 이미 존재하는 계정입니다
      ///
      /// Locales: ko
      static let alreadyExistAccount = Rswift.StringResource(key: "Already Exist Account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 인증번호
      ///
      /// Locales: ko
      static let verificationCode = Rswift.StringResource(key: "Verification Code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 인증번호는 6자리입니다.
      ///
      /// Locales: ko
      static let validationCodeIs6Digits = Rswift.StringResource(key: "Validation code is 6 digits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 인증코드가 맞지 않습니다
      ///
      /// Locales: ko
      static let verifyCodeIsNotMatch = Rswift.StringResource(key: "Verify code is not match", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 인증하기
      ///
      /// Locales: ko
      static let verify = Rswift.StringResource(key: "Verify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 인터넷 연결 없음
      ///
      /// Locales: ko
      static let noInternetConnection = Rswift.StringResource(key: "No Internet Connection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일기 관리
      ///
      /// Locales: ko
      static let manageDiary = Rswift.StringResource(key: "Manage Diary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일기 삭제
      ///
      /// Locales: ko
      static let deleteDiary = Rswift.StringResource(key: "Delete Diary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일기 수정
      ///
      /// Locales: ko
      static let editDiary = Rswift.StringResource(key: "Edit Diary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일기 작성
      ///
      /// Locales: ko
      static let writeDiary = Rswift.StringResource(key: "Write Diary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일기가 존재하지 않습니다! 일기를 채워보시는건 어떨까요?
      ///
      /// Locales: ko
      static let diaryDosenTExistHowAboutWriteDiary = Rswift.StringResource(key: "Diary dosen't exist!\nHow about write diary?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일기에 빈칸이 존재하는 것 같아요!
      ///
      /// Locales: ko
      static let themeIsMissingPartOfDiary = Rswift.StringResource(key: "Theme is missing part of Diary!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일치하는 유저가 없습니다
      ///
      /// Locales: ko
      static let matchedUserNotExist = Rswift.StringResource(key: "Matched user not exist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 일치하는 일기가 없습니다
      ///
      /// Locales: ko
      static let thereIsNotMatchedDiary = Rswift.StringResource(key: "There is not matched diary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 입력한 비밀번호가 다릅니다.
      ///
      /// Locales: ko
      static let incorrectPassword = Rswift.StringResource(key: "Incorrect Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 자몽에이드
      ///
      /// Locales: ko
      static let grapefruitAde = Rswift.StringResource(key: "Grapefruit Ade", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 잠금 설정
      ///
      /// Locales: ko
      static let lockSetting = Rswift.StringResource(key: "Lock Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 저장
      ///
      /// Locales: ko
      static let save = Rswift.StringResource(key: "Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 취소
      ///
      /// Locales: ko
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 코드가 성공적으로 전송됨
      ///
      /// Locales: ko
      static let verificationCodeSentSuccessfully = Rswift.StringResource(key: "Verification Code sent Successfully", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 타입 변환 오류. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static let typeCastingErrorPleaseContectUs = Rswift.StringResource(key: "Type Casting Error. Please Contect Us", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 태그 추가
      ///
      /// Locales: ko
      static let addTags = Rswift.StringResource(key: "Add Tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 테마 색상 설정
      ///
      /// Locales: ko
      static let setThemeColor = Rswift.StringResource(key: "Set Theme Color", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 테마 설정
      ///
      /// Locales: ko
      static let themeSetting = Rswift.StringResource(key: "Theme Setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 토큰 에러. 다시 로그인해주세요
      ///
      /// Locales: ko
      static let tokenErrorPleaseSignInAgain = Rswift.StringResource(key: "Token error. Please sign in again", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 패스워드 확인
      ///
      /// Locales: ko
      static let confirmPassword = Rswift.StringResource(key: "Confirm password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 회원가입
      ///
      /// Locales: ko
      static let signUp = Rswift.StringResource(key: "Sign up", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)
      /// ko translation: 회원가입 성공!
      ///
      /// Locales: ko
      static let signUpSuccess = Rswift.StringResource(key: "Sign up Success!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ko"], comment: nil)

      /// ko translation: # 검색 결과가 없습니다
      ///
      /// Locales: ko
      static func thereSNoSearchResult(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("# There's no search result.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "# There's no search result."
        }

        return NSLocalizedString("# There's no search result.", bundle: bundle, comment: "")
      }

      /// ko translation: # 태그 작성
      ///
      /// Locales: ko
      static func writeTags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("# Write Tags", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "# Write Tags"
        }

        return NSLocalizedString("# Write Tags", bundle: bundle, comment: "")
      }

      /// ko translation: yyyy년
      ///
      /// Locales: ko
      static func yyyy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yyyy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yyyy"
        }

        return NSLocalizedString("yyyy", bundle: bundle, comment: "")
      }

      /// ko translation: yyyy년 MM월
      ///
      /// Locales: ko
      static func mmmYyyy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MMM yyyy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MMM yyyy"
        }

        return NSLocalizedString("MMM yyyy", bundle: bundle, comment: "")
      }

      /// ko translation: yyyy년 MM월 dd일
      ///
      /// Locales: ko
      static func mmmDdYyyy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MMM dd yyyy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MMM dd yyyy"
        }

        return NSLocalizedString("MMM dd yyyy", bundle: bundle, comment: "")
      }

      /// ko translation: 검색어를 입력하세요
      ///
      /// Locales: ko
      static func enterSearchTag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter Search Tag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter Search Tag"
        }

        return NSLocalizedString("Enter Search Tag", bundle: bundle, comment: "")
      }

      /// ko translation: 다시 이메일 인증요청을 보내주세요
      ///
      /// Locales: ko
      static func pleaseResendEmailVerifyCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please resend email verify code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please resend email verify code"
        }

        return NSLocalizedString("Please resend email verify code", bundle: bundle, comment: "")
      }

      /// ko translation: 다음
      ///
      /// Locales: ko
      static func next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Next"
        }

        return NSLocalizedString("Next", bundle: bundle, comment: "")
      }

      /// ko translation: 다크 모드
      ///
      /// Locales: ko
      static func darkMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dark Mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dark Mode"
        }

        return NSLocalizedString("Dark Mode", bundle: bundle, comment: "")
      }

      /// ko translation: 라이트 / 다크
      ///
      /// Locales: ko
      static func lightDark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Light / Dark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Light / Dark"
        }

        return NSLocalizedString("Light / Dark", bundle: bundle, comment: "")
      }

      /// ko translation: 라이트 모드
      ///
      /// Locales: ko
      static func lightMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Light Mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Light Mode"
        }

        return NSLocalizedString("Light Mode", bundle: bundle, comment: "")
      }

      /// ko translation: 레몬에이드
      ///
      /// Locales: ko
      static func lemonade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lemonade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Lemonade"
        }

        return NSLocalizedString("Lemonade", bundle: bundle, comment: "")
      }

      /// ko translation: 로그아웃
      ///
      /// Locales: ko
      static func signOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign out"
        }

        return NSLocalizedString("Sign out", bundle: bundle, comment: "")
      }

      /// ko translation: 로그인
      ///
      /// Locales: ko
      static func signIn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign in", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign in"
        }

        return NSLocalizedString("Sign in", bundle: bundle, comment: "")
      }

      /// ko translation: 민트초코
      ///
      /// Locales: ko
      static func mintChocolate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mint chocolate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mint chocolate"
        }

        return NSLocalizedString("Mint chocolate", bundle: bundle, comment: "")
      }

      /// ko translation: 블루레몬에이드
      ///
      /// Locales: ko
      static func blueLemonade(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blue Lemonade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blue Lemonade"
        }

        return NSLocalizedString("Blue Lemonade", bundle: bundle, comment: "")
      }

      /// ko translation: 블루베리에이드
      ///
      /// Locales: ko
      static func blueberryAde(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Blueberry Ade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Blueberry Ade"
        }

        return NSLocalizedString("Blueberry Ade", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호
      ///
      /// Locales: ko
      static func password(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password"
        }

        return NSLocalizedString("Password", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호 변경
      ///
      /// Locales: ko
      static func changePasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change Passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change Passcode"
        }

        return NSLocalizedString("Change Passcode", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호가 맞지 않습니다. 다시 입력해주세요
      ///
      /// Locales: ko
      static func incorrectPasscordReEnterPasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Incorrect passcord, Re-enter passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Incorrect passcord, Re-enter passcode"
        }

        return NSLocalizedString("Incorrect passcord, Re-enter passcode", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호가 맞지 않습니다. 새로운 비밀번호를 입력해주세요
      ///
      /// Locales: ko
      static func incorrectPasscordEnterNewPasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Incorrect Passcord, Enter new passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Incorrect Passcord, Enter new passcode"
        }

        return NSLocalizedString("Incorrect Passcord, Enter new passcode", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호가 틀렸습니다. 다시 시도하세요
      ///
      /// Locales: ko
      static func wrongPasswordTryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wrong password. Try again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wrong password. Try again"
        }

        return NSLocalizedString("Wrong password. Try again", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호를 4자리 이상 입력해주세요
      ///
      /// Locales: ko
      static func enterPasswordAtLeast4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter password at least 4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter password at least 4"
        }

        return NSLocalizedString("Enter password at least 4", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호를 입력하세요
      ///
      /// Locales: ko
      static func enterPasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter passcode"
        }

        return NSLocalizedString("Enter passcode", bundle: bundle, comment: "")
      }

      /// ko translation: 비밀번호를 재입력하세요
      ///
      /// Locales: ko
      static func reEnterPasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Re-enter passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Re-enter passcode"
        }

        return NSLocalizedString("Re-enter passcode", bundle: bundle, comment: "")
      }

      /// ko translation: 사용자 피드백
      ///
      /// Locales: ko
      static func contectUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contect Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contect Us"
        }

        return NSLocalizedString("Contect Us", bundle: bundle, comment: "")
      }

      /// ko translation: 사용자의 일기가 아닙니다
      ///
      /// Locales: ko
      static func thisIsNotYourDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This is not your diary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This is not your diary"
        }

        return NSLocalizedString("This is not your diary", bundle: bundle, comment: "")
      }

      /// ko translation: 새로운 비밀번호를 입력해주세요
      ///
      /// Locales: ko
      static func enterNewPasscode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Enter new passcode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Enter new passcode"
        }

        return NSLocalizedString("Enter new passcode", bundle: bundle, comment: "")
      }

      /// ko translation: 생체인증 (Touch ID, Face ID)
      ///
      /// Locales: ko
      static func biometricIDTouchIDFaceID(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Biometric ID (Touch ID, Face ID)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Biometric ID (Touch ID, Face ID)"
        }

        return NSLocalizedString("Biometric ID (Touch ID, Face ID)", bundle: bundle, comment: "")
      }

      /// ko translation: 서버 에러. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static func serverErrorPleaseContectUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Server Error. Please Contect Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Server Error. Please Contect Us"
        }

        return NSLocalizedString("Server Error. Please Contect Us", bundle: bundle, comment: "")
      }

      /// ko translation: 시간 형식 오류. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static func timeFormatErrorPleaseContectUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Time format Error. Please Contect Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Time format Error. Please Contect Us"
        }

        return NSLocalizedString("Time format Error. Please Contect Us", bundle: bundle, comment: "")
      }

      /// ko translation: 시스템 설정 모드
      ///
      /// Locales: ko
      static func systemSetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("System Setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "System Setting"
        }

        return NSLocalizedString("System Setting", bundle: bundle, comment: "")
      }

      /// ko translation: 아직 회원이 아니신가요? <h>회원가입하기</h>
      ///
      /// Locales: ko
      static func donTHaveAnAccountHSignUpH(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Don't have an account? <h>Sign up</h>", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Don't have an account? <h>Sign up</h>"
        }

        return NSLocalizedString("Don't have an account? <h>Sign up</h>", bundle: bundle, comment: "")
      }

      /// ko translation: 알 수 없는 오류. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static func unkwonErrorPleaseContectUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unkwon Error. Please Contect Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unkwon Error. Please Contect Us"
        }

        return NSLocalizedString("Unkwon Error. Please Contect Us", bundle: bundle, comment: "")
      }

      /// ko translation: 오늘 하루를 기록하세요
      ///
      /// Locales: ko
      static func writeDownYourToday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write down your today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write down your today"
        }

        return NSLocalizedString("Write down your today", bundle: bundle, comment: "")
      }

      /// ko translation: 오늘하루
      ///
      /// Locales: ko
      static func someday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Someday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Someday"
        }

        return NSLocalizedString("Someday", bundle: bundle, comment: "")
      }

      /// ko translation: 오픈소스 라이선스
      ///
      /// Locales: ko
      static func openSourceLicense(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open-source license", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open-source license"
        }

        return NSLocalizedString("Open-source license", bundle: bundle, comment: "")
      }

      /// ko translation: 요청 에러. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static func requestErrorPleaseContectUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Request Error. Please Contect Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Request Error. Please Contect Us"
        }

        return NSLocalizedString("Request Error. Please Contect Us", bundle: bundle, comment: "")
      }

      /// ko translation: 이메일
      ///
      /// Locales: ko
      static func email(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email"
        }

        return NSLocalizedString("Email", bundle: bundle, comment: "")
      }

      /// ko translation: 이메일 인증이 완료되지 않았습니다
      ///
      /// Locales: ko
      static func emailVerificationNotConfirmedYet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Email verification not confirmed yet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Email verification not confirmed yet"
        }

        return NSLocalizedString("Email verification not confirmed yet", bundle: bundle, comment: "")
      }

      /// ko translation: 이메일 형식에 맞지 않습니다
      ///
      /// Locales: ko
      static func itIsNotEmailFormat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("It is not email format", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "It is not email format"
        }

        return NSLocalizedString("It is not email format", bundle: bundle, comment: "")
      }

      /// ko translation: 이미 계정이 있으신가요? <h>로그인하기</h>
      ///
      /// Locales: ko
      static func alreadyHaveAccountHSignInH(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already have account? <h>Sign in</h>", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already have account? <h>Sign in</h>"
        }

        return NSLocalizedString("Already have account? <h>Sign in</h>", bundle: bundle, comment: "")
      }

      /// ko translation: 이미 로그아웃되었습니다
      ///
      /// Locales: ko
      static func alreadySignedOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already signed out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already signed out"
        }

        return NSLocalizedString("Already signed out", bundle: bundle, comment: "")
      }

      /// ko translation: 이미 사용중인 이메일입니다
      ///
      /// Locales: ko
      static func thisEmailIsAlreadyInUse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This email is already in use", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This email is already in use"
        }

        return NSLocalizedString("This email is already in use", bundle: bundle, comment: "")
      }

      /// ko translation: 이미 존재하는 계정입니다
      ///
      /// Locales: ko
      static func alreadyExistAccount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Already Exist Account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Already Exist Account"
        }

        return NSLocalizedString("Already Exist Account", bundle: bundle, comment: "")
      }

      /// ko translation: 인증번호
      ///
      /// Locales: ko
      static func verificationCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verification Code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verification Code"
        }

        return NSLocalizedString("Verification Code", bundle: bundle, comment: "")
      }

      /// ko translation: 인증번호는 6자리입니다.
      ///
      /// Locales: ko
      static func validationCodeIs6Digits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Validation code is 6 digits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Validation code is 6 digits"
        }

        return NSLocalizedString("Validation code is 6 digits", bundle: bundle, comment: "")
      }

      /// ko translation: 인증코드가 맞지 않습니다
      ///
      /// Locales: ko
      static func verifyCodeIsNotMatch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verify code is not match", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verify code is not match"
        }

        return NSLocalizedString("Verify code is not match", bundle: bundle, comment: "")
      }

      /// ko translation: 인증하기
      ///
      /// Locales: ko
      static func verify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verify"
        }

        return NSLocalizedString("Verify", bundle: bundle, comment: "")
      }

      /// ko translation: 인터넷 연결 없음
      ///
      /// Locales: ko
      static func noInternetConnection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Internet Connection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Internet Connection"
        }

        return NSLocalizedString("No Internet Connection", bundle: bundle, comment: "")
      }

      /// ko translation: 일기 관리
      ///
      /// Locales: ko
      static func manageDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Manage Diary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Manage Diary"
        }

        return NSLocalizedString("Manage Diary", bundle: bundle, comment: "")
      }

      /// ko translation: 일기 삭제
      ///
      /// Locales: ko
      static func deleteDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Diary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Diary"
        }

        return NSLocalizedString("Delete Diary", bundle: bundle, comment: "")
      }

      /// ko translation: 일기 수정
      ///
      /// Locales: ko
      static func editDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Diary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Diary"
        }

        return NSLocalizedString("Edit Diary", bundle: bundle, comment: "")
      }

      /// ko translation: 일기 작성
      ///
      /// Locales: ko
      static func writeDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Write Diary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Write Diary"
        }

        return NSLocalizedString("Write Diary", bundle: bundle, comment: "")
      }

      /// ko translation: 일기가 존재하지 않습니다! 일기를 채워보시는건 어떨까요?
      ///
      /// Locales: ko
      static func diaryDosenTExistHowAboutWriteDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Diary dosen't exist!\nHow about write diary?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Diary dosen't exist!\nHow about write diary?"
        }

        return NSLocalizedString("Diary dosen't exist!\nHow about write diary?", bundle: bundle, comment: "")
      }

      /// ko translation: 일기에 빈칸이 존재하는 것 같아요!
      ///
      /// Locales: ko
      static func themeIsMissingPartOfDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Theme is missing part of Diary!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Theme is missing part of Diary!"
        }

        return NSLocalizedString("Theme is missing part of Diary!", bundle: bundle, comment: "")
      }

      /// ko translation: 일치하는 유저가 없습니다
      ///
      /// Locales: ko
      static func matchedUserNotExist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Matched user not exist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Matched user not exist"
        }

        return NSLocalizedString("Matched user not exist", bundle: bundle, comment: "")
      }

      /// ko translation: 일치하는 일기가 없습니다
      ///
      /// Locales: ko
      static func thereIsNotMatchedDiary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("There is not matched diary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "There is not matched diary"
        }

        return NSLocalizedString("There is not matched diary", bundle: bundle, comment: "")
      }

      /// ko translation: 입력한 비밀번호가 다릅니다.
      ///
      /// Locales: ko
      static func incorrectPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Incorrect Password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Incorrect Password"
        }

        return NSLocalizedString("Incorrect Password", bundle: bundle, comment: "")
      }

      /// ko translation: 자몽에이드
      ///
      /// Locales: ko
      static func grapefruitAde(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Grapefruit Ade", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Grapefruit Ade"
        }

        return NSLocalizedString("Grapefruit Ade", bundle: bundle, comment: "")
      }

      /// ko translation: 잠금 설정
      ///
      /// Locales: ko
      static func lockSetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lock Setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Lock Setting"
        }

        return NSLocalizedString("Lock Setting", bundle: bundle, comment: "")
      }

      /// ko translation: 저장
      ///
      /// Locales: ko
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save"
        }

        return NSLocalizedString("Save", bundle: bundle, comment: "")
      }

      /// ko translation: 취소
      ///
      /// Locales: ko
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// ko translation: 코드가 성공적으로 전송됨
      ///
      /// Locales: ko
      static func verificationCodeSentSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Verification Code sent Successfully", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Verification Code sent Successfully"
        }

        return NSLocalizedString("Verification Code sent Successfully", bundle: bundle, comment: "")
      }

      /// ko translation: 타입 변환 오류. 개발자에게 문의해주세요
      ///
      /// Locales: ko
      static func typeCastingErrorPleaseContectUs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type Casting Error. Please Contect Us", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type Casting Error. Please Contect Us"
        }

        return NSLocalizedString("Type Casting Error. Please Contect Us", bundle: bundle, comment: "")
      }

      /// ko translation: 태그 추가
      ///
      /// Locales: ko
      static func addTags(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Tags", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Tags"
        }

        return NSLocalizedString("Add Tags", bundle: bundle, comment: "")
      }

      /// ko translation: 테마 색상 설정
      ///
      /// Locales: ko
      static func setThemeColor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Set Theme Color", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Set Theme Color"
        }

        return NSLocalizedString("Set Theme Color", bundle: bundle, comment: "")
      }

      /// ko translation: 테마 설정
      ///
      /// Locales: ko
      static func themeSetting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Theme Setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Theme Setting"
        }

        return NSLocalizedString("Theme Setting", bundle: bundle, comment: "")
      }

      /// ko translation: 토큰 에러. 다시 로그인해주세요
      ///
      /// Locales: ko
      static func tokenErrorPleaseSignInAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Token error. Please sign in again", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Token error. Please sign in again"
        }

        return NSLocalizedString("Token error. Please sign in again", bundle: bundle, comment: "")
      }

      /// ko translation: 패스워드 확인
      ///
      /// Locales: ko
      static func confirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Confirm password", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Confirm password"
        }

        return NSLocalizedString("Confirm password", bundle: bundle, comment: "")
      }

      /// ko translation: 회원가입
      ///
      /// Locales: ko
      static func signUp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign up", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign up"
        }

        return NSLocalizedString("Sign up", bundle: bundle, comment: "")
      }

      /// ko translation: 회원가입 성공!
      ///
      /// Locales: ko
      static func signUpSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sign up Success!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sign up Success!"
        }

        return NSLocalizedString("Sign up Success!", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
